<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基于Hexo和github搭建个人博客-基础配置篇①</title>
    <url>/2022/06/11/%E5%9F%BA%E4%BA%8EHexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE%E7%AF%871/</url>
    <content><![CDATA[<p>Hexo是一个快速、简洁且高效的博客框架，使用 Markdown解析文章，可以按照指定的主题解析成静态网页。结合Github pages的托管服务，可以将Hexo生成的静态网页发布，供其他人访问，轻松搭建免费的个人博客。</p>
<span id="more"></span>

<p>基于Hexo和GitHub pages搭建个人博客大体上可分为两步：</p>
<ol>
<li>基于Hexo生成本地静态博客</li>
<li>部署静态博客到GitHub pages供其他人访问</li>
</ol>
<h2 id="基于Hexo生成本地静态博客"><a href="#基于Hexo生成本地静态博客" class="headerlink" title="基于Hexo生成本地静态博客"></a>基于Hexo生成本地静态博客</h2><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>Hexo基于Node.js，生成静态博客后，需要基于分布式版本控制工具Git将本地网页文件上传到Github。因此，在安装Hexo之前，首先需要安装下列应用程序：</p>
<ul>
<li><a href="https://nodejs.org/en/">Node.js</a></li>
<li><a href="https://git-scm.com/">git</a></li>
</ul>
<p>若Node.js和git安装成功，终端输入<code>node -v</code>、<code>npm -v</code>和<code>git --version</code>，会显示版本号。</p>
<h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure>
<p>安装以后，可以使用以下命令执行 Hexo：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx hexo &lt;command&gt;</span><br></pre></td></tr></table></figure>
<p>若安装成功，可通过<code>npx hexo -v </code>命令查看安装的Hexo版本。为保证更好的运行，建议永远安装最新版本的 Hexo，以及 <a href="https://hexo.io/zh-cn/docs/">推荐的 Node.js 版本</a></p>
<h3 id="创建本地Hexo博客"><a href="#创建本地Hexo博客" class="headerlink" title="创建本地Hexo博客"></a>创建本地Hexo博客</h3><p>安装 Hexo 完成后，执行下列命令创建本地博客，Hexo 将会在指定文件夹中新建所需要的文件，该文件夹即为存储本地博客的位置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx hexo init &lt;绝对路径&gt;</span><br><span class="line">cd &lt;绝对路径&gt;</span><br><span class="line">npm install </span><br></pre></td></tr></table></figure>
<p>除上述方法外，也可以在指定位置手动新建文件夹，<code>cd</code>到该文件夹后分别执行<code>npx hexo init</code>和<code>npm install</code>命令创建博客。新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>
<p>在命令行中输入<code>npx hexo s</code>，在浏览器中打开localhost:4000能看到Hexo生成的本地博客静态页面。<br><img src="http://mwebzyblog.oss-cn-beijing.aliyuncs.com/2022/06/13/16551181428283.jpg?x-oss-process=image/auto-orient,1/quality,q_90/format,jpg"><br>预览结束后，键入<code>Ctrl+C</code>关闭hexo server。</p>
<h2 id="部署静态博客到GitHub-pages"><a href="#部署静态博客到GitHub-pages" class="headerlink" title="部署静态博客到GitHub pages"></a>部署静态博客到GitHub pages</h2><p>本地博客搭建成功后，需要通过git工具将本地静态网页发布到Github。在此之前，首先需要注册Github账号，并配置对应仓库。</p>
<h3 id="Github账号注册与仓库配置"><a href="#Github账号注册与仓库配置" class="headerlink" title="Github账号注册与仓库配置"></a>Github账号注册与仓库配置</h3><ol>
<li>注册<a href="https://github.com/">github</a>账号，指定用户名<code>user_name</code>。</li>
<li>登录账号，新建仓库（头像左侧→New repository）,仓库名为<code>user_name.github.io</code>，设置仓库为<code>Public</code>，并添加<code>README</code>文件<br><img src="http://mwebzyblog.oss-cn-beijing.aliyuncs.com/2022/06/13/16551094128956.jpg?x-oss-process=image/auto-orient,1/quality,q_90/format,jpg"></li>
</ol>
<h3 id="链接本地Git与Github"><a href="#链接本地Git与Github" class="headerlink" title="链接本地Git与Github"></a>链接本地Git与Github</h3><p>Github仓库配置好后，下一步是将本地Git与Github链接，为将本地博客发布至Github pages做好准备。本地Git与Github链接通过设置ssh秘钥来完成，设置步骤如下：</p>
<ol>
<li>打开终端，设置本地Git的用户名和邮箱，注意要与Github相同：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>设置完成后，使用以下命令检查是否输入正确:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>在终端内执行下面命令，生成SSH秘钥。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ssh简单而言是一个秘钥，id_rsa是本地电脑的私人秘钥，id_rsa.pub是公共秘钥。公钥放在Github上，当链接本地与Github时，会根据公钥匹配私钥，匹配上则成功链接，之后可以用Git上传本地文件到Github上。</p>
</blockquote>
</li>
<li><p>找到生成的.ssh文件夹中的<code>id_rsa.pub</code>秘钥，使用文本编辑器打开，复制<code>全部</code>内容。将其粘贴到<code>Github网站</code>→<code>头像</code>→<code>Settings</code>→<code>SSH and GPG keys</code>→<code>New SSH key</code>。<br><img src="http://mwebzyblog.oss-cn-beijing.aliyuncs.com/2022/06/13/16551102710873.jpg?x-oss-process=image/auto-orient,1/quality,q_90/format,jpg"></p>
</li>
</ol>
<p>名字随便取，粘贴完成后，点击<code>Add SSH key</code>。</p>
<ol start="4">
<li>使用终端检查Github公钥是否成功设置，在终端中输入<code>ssh git@github.com</code>，如果输出部分出现你的用户名，则代表设置成功。<br><img src="http://mwebzyblog.oss-cn-beijing.aliyuncs.com/2022/06/13/16551195539085.jpg?x-oss-process=image/auto-orient,1/quality,q_90/format,jpg"></li>
</ol>
<h3 id="发布网站"><a href="#发布网站" class="headerlink" title="发布网站"></a>发布网站</h3><p>将本地Git也和Github成功链接后，接下来要做的就是把本地搭的网站发布出去，让网站可以被其他人访问。</p>
<ol>
<li>打开本地blog根目录下的站点配置文件_config.yml，该文件用于配置博客的基本信息，称之为<code>站点配置文件</code>。</li>
<li>修改站点配置文件_config.yml的最后一行配置并保存。其中，<code>user_name</code>为Github账户的用户名</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: git@github.com:user_name/user_name.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：这里的<code>branch</code>可以设置为<code>main</code>或者<code>master</code>，但务必与Github仓库中<code>Settings</code>–<code>Pages</code>–<code>Source</code>–<code>Branch</code>相匹配，否则即使上传成功也看不到你的网站。这里的<code>Settings</code>指的是仓库的<code>Settings</code></p>
<p>修改deploy其实是在给网站部署命令<code>hexo d</code>做相应配置，使用该命令进行部署时，hexo就能知道要把blog部署到Github的博客仓库中。</p>
<ol start="3">
<li><p>安装git部署插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行以下命令，发布网站</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx hexo clean //清除缓存，若是网页正常情况下可以忽略这条命令</span><br><span class="line">npx hexo g //生成静态网页</span><br><span class="line">npx hexo d //部署</span><br></pre></td></tr></table></figure>
<p>部署完成后，打开浏览器，输入博客仓库路径user_name.github.io，就能看到发布的博客了。</p>
</li>
</ol>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>博客发布成功后，还需要对博客进行优化，使博客的呈现和书写更加美观舒适，具体还包含以下部分：</p>
<ol>
<li>修改主题样式，修改博客名称、简介、用户头像等内容。</li>
<li>增加主页、分类、标签、关于等标签和页面。</li>
<li>搭建图床，利用合适的Markdown软件开始进行博客创作。</li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="https://apollomao.com/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/#hexo%E7%A7%81%E4%BA%BA%E5%AE%9A%E5%88%B6">Hexo+Github博客搭建教程</a></li>
<li><a href="https://blog.zhheo.com/p/128998ac.html">Hexo错误：spawn failed的解决方法</a></li>
<li><a href="https://godweiyang.com/2018/04/13/hexo-blog/">超详细Hexo+Github博客搭建小白教程</a></li>
<li><a href="https://www.jianshu.com/p/7b8faf77d1af">Hexo常用命令</a></li>
</ol>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
